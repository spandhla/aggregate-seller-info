buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.owasp:dependency-check-gradle:${owasp_plugin_version}"
    }
}
plugins {
    id "org.springframework.boot"
    id "io.spring.dependency-management"
    id "java-library"
    id "com.gorylenko.gradle-git-properties"
    id "com.github.ben-manes.versions"
    id "com.diffplug.spotless"
    id "org.sonarqube" apply false
}
apply from: "gradle/code-quality.gradle"
if (project.hasProperty("ci")) {
    apply from: "gradle/owasp.gradle"
}

group = "com.sentryc"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = 17
targetCompatibility = 17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation "org.springframework.boot:spring-boot-starter-web"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    runtimeOnly "org.postgresql:postgresql"
    implementation "org.flywaydb:flyway-core"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdoc_openapi_version}"
    implementation "org.apache.commons:commons-lang3"
    implementation "commons-io:commons-io:${commons_io_version}"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation 'org.springframework:spring-webflux'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation "org.springframework.boot:spring-boot-testcontainers"
    testImplementation "org.projectlombok:lombok"
    testImplementation "org.awaitility:awaitility"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"
    testAnnotationProcessor "org.projectlombok:lombok"
    testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'
    testImplementation 'org.mockito:mockito-core:5.11.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${spring_cloud_version}"
    }
}

defaultTasks "bootRun"

springBoot {
    buildInfo()
}

bootJar {
    //launchScript()
}

bootBuildImage {
    imageName = "DOCKER_USERNAME/aggregate-seller-info"
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

if (project.hasProperty("local")) {
    bootRun {
        args = ["--spring.profiles.active=local"]
    }
}

gitProperties {
    failOnNoGitDirectory = false
    keys = [
            "git.branch",
            "git.commit.id.abbrev",
            "git.commit.user.name",
            "git.commit.message.full"
    ]
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        palantirJavaFormat("2.38.0")
        formatAnnotations()
    }
}

check.dependsOn spotlessCheck

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntegrationTest*", "**/*IntTest*"
    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED"]
        showStandardStreams = true
        exceptionFormat = "full"
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform()

    include "**/*IT*", "**/*IntegrationTest*", "**/*IntTest*"
    shouldRunAfter test

    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED"]
        showStandardStreams = true
        exceptionFormat = "full"
    }
}

check.dependsOn integrationTest
check.dependsOn jacocoTestReport

tasks.register('testReport', TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(test)
}

tasks.register('integrationTestReport', TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(integrationTest)
}

